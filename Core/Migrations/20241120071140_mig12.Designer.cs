// <auto-generated />
using System;
using Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Core.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20241120071140_mig12")]
    partial class mig12
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.35")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Domain.Google.GoogleAccessToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ExpiresIn")
                        .HasColumnType("integer");

                    b.Property<int>("GoogleAppId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("InsertedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TokenType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GoogleAppId");

                    b.HasIndex("UserId");

                    b.ToTable("GoogleAccessToken");
                });

            modelBuilder.Entity("Core.Domain.Google.GoogleApp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AppSecret")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("InsertedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("RedirectUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("GoogleApp");
                });

            modelBuilder.Entity("Core.Domain.Google.GoogleAuthorizationCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorizationCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GoogleAppId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("InsertedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GoogleAppId");

                    b.HasIndex("UserId");

                    b.ToTable("GoogleAuthorizationCode");
                });

            modelBuilder.Entity("Core.Domain.Meta.MetaAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AppId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AppSecret")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("InsertedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MetaAccess");
                });

            modelBuilder.Entity("Core.Domain.Meta.MetaLongAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ExpiresIn")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("InsertedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MetaAccessId")
                        .HasColumnType("integer");

                    b.Property<string>("TokenType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MetaAccessId");

                    b.ToTable("MetaLongAccess");
                });

            modelBuilder.Entity("Core.Domain.User.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("InsertedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Core.Domain.Google.GoogleAccessToken", b =>
                {
                    b.HasOne("Core.Domain.Google.GoogleApp", "GoogleApp")
                        .WithMany("GoogleAccessToken")
                        .HasForeignKey("GoogleAppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.User.User", "User")
                        .WithMany("GoogleAccessToken")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GoogleApp");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Domain.Google.GoogleApp", b =>
                {
                    b.HasOne("Core.Domain.User.User", "User")
                        .WithMany("GoogleApp")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Domain.Google.GoogleAuthorizationCode", b =>
                {
                    b.HasOne("Core.Domain.Google.GoogleApp", "GoogleApp")
                        .WithMany("GoogleAuthorizationCode")
                        .HasForeignKey("GoogleAppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.User.User", "User")
                        .WithMany("GoogleAuthorizationCode")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GoogleApp");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Domain.Meta.MetaAccess", b =>
                {
                    b.HasOne("Core.Domain.User.User", "User")
                        .WithMany("MetaAccess")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Domain.Meta.MetaLongAccess", b =>
                {
                    b.HasOne("Core.Domain.Meta.MetaAccess", "MetaAccess")
                        .WithMany("MetaLongAccess")
                        .HasForeignKey("MetaAccessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MetaAccess");
                });

            modelBuilder.Entity("Core.Domain.Google.GoogleApp", b =>
                {
                    b.Navigation("GoogleAccessToken");

                    b.Navigation("GoogleAuthorizationCode");
                });

            modelBuilder.Entity("Core.Domain.Meta.MetaAccess", b =>
                {
                    b.Navigation("MetaLongAccess");
                });

            modelBuilder.Entity("Core.Domain.User.User", b =>
                {
                    b.Navigation("GoogleAccessToken");

                    b.Navigation("GoogleApp");

                    b.Navigation("GoogleAuthorizationCode");

                    b.Navigation("MetaAccess");
                });
#pragma warning restore 612, 618
        }
    }
}
